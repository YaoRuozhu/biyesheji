import numpy as np
from sklearn import tree
from sklearn.datasets import load_iris
import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap
import keras
import data
import robustness_calculator
import keras.layers as layers
from keras.models import Sequential
from keras.layers import Dense

count_label = data.count_label
count_feature = data.count_feature
#data_orig = data.data_orig
data_orig = np.load('data_fgsm.npy')

def draw(model, iter_no, model_name):
    # 整个数据集分类结果可视化
    x = data_orig[:, 0:2]
    y = data_orig[:, 2]
    # 计算散点图的坐标上下界
    #x_min, x_max = x[:, 0].min() - 0.05, x[:, 0].max()+0.05
    #y_min, y_max = x[:, 1].min()-0.05, x[:, 1].max()+0.05
    x_min, x_max = 0 - 0.05, 1 + 0.05
    y_min, y_max = 0 - 0.05, 1 + 0.05
    # 绘制边界
    cmap_light = ListedColormap(['#000000', '#FFFFFF'])#, '#0000FF'])
    h = 0.01
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    Z = model.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = np.argmax(Z, axis=1)
    Z = Z.reshape(xx.shape)
    #points = np.empty([0, 2])
    #pred_points = np.empty([0, 1])
    #for i in [1, 3]:
        #R = robustness_calculator.point_robustness(model, data_orig[i, :])
        #points_single, pred_points_single = robustness_calculator.point_generator(model, data_orig[i, :], R)
        #points = np.append(points, points_single.reshape([100, 2]), axis=0)
        #pred_points = np.append(pred_points, pred_points_single, axis=0)
    plt.figure()
    plt.title(str(iter_no)+' '+model_name)
    plt.pcolormesh(xx, yy, Z, cmap=cmap_light)
    plt.scatter(x[:, 0], x[:, 1], c=y)
    #plt.scatter(points[:, 0], points[:, 1], marker='x', color='g')

    #plt.scatter(points[:, 0], points[:, 1], marker='x', color='b')
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())
    plt.show()


model = Sequential()
model.add(Dense(15, activation='relu', input_dim=count_feature))
model.add(Dense(15, activation='relu'))
model.add(Dense(15, activation='relu'))
model.add(Dense(15, activation='relu'))
model.add(Dense(15, activation='relu'))

model.add(Dense(count_label, activation='softmax'))
model.compile(loss='categorical_crossentropy',
              optimizer='sgd',
              metrics=['accuracy'])

model.load_weights('my_model1_weights.h5')
draw(model, 0, 'fgsm')
